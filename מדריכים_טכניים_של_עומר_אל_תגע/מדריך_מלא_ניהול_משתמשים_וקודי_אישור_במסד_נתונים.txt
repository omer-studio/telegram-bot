===============================================================================
                    מדריך מלא: ניהול משתמשים וקודי אישור במסד נתונים
===============================================================================

📋 נוצר: 2025-07-07
🔄 גרסה: 1.0  
👤 מחבר: AI Assistant + עומר
📧 תמיכה: עומר

===============================================================================
🎯 מטרה ורקע
===============================================================================

מטרה:
מעבר מלא מגיליונות Google Sheets למסד נתונים PostgreSQL לניהול משתמשים וקודי אישור.

רקע:
- בעבר: הבוט השתמש בגיליונות Google (איטי, לא יציב)
- עכשיו: הכל במסד נתונים (מהיר, יציב, מאובטח)

===============================================================================
🏗️ מבנה טכני
===============================================================================

טבלה: user_profiles
--------------------
CREATE TABLE user_profiles (
    chat_id VARCHAR,           -- מזהה טלגרם של המשתמש (NULL עד שהוא מזין קוד)
    code_approve VARCHAR,     -- קוד האישור שנוצר על ידי מייק (NULL אם המשתמש לא הזין קוד)
    code_try INTEGER,          -- מספר נסיונות קוד שגוי
    approved BOOLEAN,          -- האם המשתמש אישר תנאים
    updated_at TIMESTAMP,      -- זמן עדכון אחרון
    -- שדות נוספים: name, age, וכו...
);

אינדקסים:
----------
- chat_id (ייחודי)
- code_approve (לחיפוש מהיר)

===============================================================================
🔄 זרימת התהליך המלאה
===============================================================================

שלב 0: יצירת קוד אישור (מייק)
------------------------------
כשאדם נרשם לקורס → מייק יוצר:

SQL:
INSERT INTO user_profiles (code_approve, code_try, approved) 
VALUES ('1234567', 0, FALSE);

מצב במסד:
code_approve='1234567' | chat_id=NULL | code_try=0 | approved=FALSE

שלב 1: משתמש חדש פונה לבוט
-------------------------------
משתמש chat_id=123456789 כותב: "היי"
↓
הבוט בודק: האם chat_id=123456789 קיים במסד?
↓
לא קיים → זה משתמש חדש
↓
יוצר שורה זמנית + שולח הודעות קבלת פנים

SQL:
INSERT INTO user_profiles (chat_id, code_try, approved) 
VALUES ('123456789', 0, FALSE);

מצב במסד:
שורה 1: code_approve='1234567' | chat_id=NULL      | code_try=0 | approved=FALSE
שורה 2: code_approve=NULL       | chat_id='123456789' | code_try=0 | approved=FALSE

שלב 2: משתמש מזין קודים שגויים
-------------------------------
משתמש כותב: "9999" (קוד שגוי)
↓
הבוט בודק: האם קוד 9999 קיים ופנוי?
↓
לא קיים → מגדיל code_try + שולח הודעת שגיאה

SQL:
UPDATE user_profiles 
SET code_try = code_try + 1 
WHERE chat_id = '123456789';

מצב במסד (אחרי 3 ניסיונות):
שורה 1: code_approve='1234567' | chat_id=NULL      | code_try=0 | approved=FALSE
שורה 2: code_approve=NULL       | chat_id='123456789' | code_try=3 | approved=FALSE

שלב 3: משתמש מזין קוד נכון
---------------------------
משתמש כותב: "1234567" (קוד נכון)
↓
הבוט בודק: האם קוד 1234567 קיים ופנוי?
↓
כן! → מיזוג השורות (מחיקה + עדכון)

SQL:
-- 1. שמירת code_try מהשורה הזמנית
SELECT code_try FROM user_profiles WHERE chat_id = '123456789'; -- מחזיר 3

-- 2. מחיקת השורה הזמנית
DELETE FROM user_profiles WHERE chat_id = '123456789';

-- 3. עדכון השורה עם הקוד
UPDATE user_profiles 
SET chat_id = '123456789', code_try = 3, approved = FALSE
WHERE code_approve = '1234567' AND chat_id IS NULL;

מצב סופי במסד:
שורה 1: code_approve='1234567' | chat_id='123456789' | code_try=3 | approved=FALSE

שלב 4: אישור תנאים
-------------------
הבוט שולח: הודעת תנאים + כפתורים
↓
משתמש לוחץ: "✅מאשר"
↓
הבוט מעדכן: approved = TRUE

SQL:
UPDATE user_profiles 
SET approved = TRUE 
WHERE chat_id = '123456789';

מצב סופי במסד:
שורה 1: code_approve='1234567' | chat_id='123456789' | code_try=3 | approved=TRUE

===============================================================================
🎯 כל הסצנריוים האפשריים
===============================================================================

סצנריו 1: משתמש חדש לחלוטין 🆕
- תנאי: chat_id לא קיים במסד
- פעולה: יצירת שורה זמנית + הודעות קבלת פנים
- תוצאה: המשתמש מקבל "היי מלך" + בקשת קוד

סצנריו 2: משתמש בתהליך רישום 🔄
- תנאי: chat_id קיים, אבל code_approve הוא NULL
- פעולה: בקשת קוד אישור
- תוצאה: "אנא הזן קוד אישור"

סצנריו 3: משתמש שנתן קוד נכון אבל לא אישר תנאים ⏳
- תנאי: chat_id קיים, יש code_approve, approved=FALSE
- פעולה: שליחת הודעת תנאים
- תוצאה: הודעת תנאים + כפתורי אישור

סצנריו 4: משתמש מאושר לחלוטין ✅
- תנאי: chat_id קיים, יש code_approve, approved=TRUE
- פעולה: שימוש רגיל בבוט
- תוצאה: תשובת GPT רגילה

סצנריו 5: משתמש שחוזר אחרי זמן 🔄
- תנאי: משתמש מאושר שחוזר אחרי ימים/שבועות
- פעולה: בדיקה מהירה במסד נתונים
- תוצאה: ישירות לשימוש רגיל (אין "היי מלך" שוב!)

===============================================================================
⚙️ עקרונות חשובים
===============================================================================

1. שמירה על נתונים במיזוג 💾
   עיקרון: אף נתון לא נאבד במיזוג השורות
   מימוש: שמירת code_try מהשורה הזמנית לפני המחיקה
   מטרה: שמירת היסטוריית ניסיונות המשתמש

2. אטומיות פעולות 🔒
   עיקרון: כל פעולה במסד נתונים אטומית (BEGIN/COMMIT/ROLLBACK)
   מימוש: שימוש ב-FOR UPDATE למניעת Race Conditions
   מטרה: מניעת כפילויות ושחיתות נתונים

3. בדיקות שלמות 🛡️
   עיקרון: בדיקה שכל עדכון הצליח
   מימוש: בדיקת cur.rowcount אחרי כל UPDATE
   מטרה: וידוא שהפעולה התבצעה כמצופה

4. לוגים מפורטים 📝
   עיקרון: תיעוד כל פעולה במסד נתונים
   מימוש: should_log_debug_prints() עם הודעות ברורות
   מטרה: יכולת debug מהירה בעת בעיות

===============================================================================
📊 טבלת מצבים
===============================================================================

מצב                | chat_id     | code_approve | approved | code_try | פעולת בוט
-------------------|-------------|---------------|----------|----------|-------------
משתמש חדש          | NULL        | '1234567'     | FALSE    | 0        | ❌ לא מוכר
התחיל תהליך        | '123456789' | NULL          | FALSE    | 0-N      | בקשת קוד
קוד נכון           | '123456789' | '1234567'     | FALSE    | N        | בקשת אישור
מאושר              | '123456789' | '1234567'     | TRUE     | N        | שימוש רגיל

===============================================================================
🚨 מקרי קצה וטיפול בשגיאות
===============================================================================

קוד כבר תפוס:
--------------
SQL:
-- אם קוד כבר צמוד למשתמש אחר:
SELECT chat_id FROM user_profiles WHERE code_approve = '1234567';
-- מחזיר: '987654321' (משתמש אחר)
-- תוצאה: "קוד כבר בשימוש" + הגדלת code_try

כפילויות קוד:
--------------
SQL:
-- אם יש יותר משורה אחת עם אותו קוד:
SELECT COUNT(*) FROM user_profiles WHERE code_approve = '1234567';
-- מחזיר: 2 (כפילות!)
-- תוצאה: "שגיאת שלמות נתונים" + דיווח לאדמין

תקלת רשת:
----------
Python:
# אם החיבור למסד נתונים נכשל:
try:
    conn = psycopg2.connect(DB_URL)
except:
    return {"success": False, "message": "Database error"}

===============================================================================
🔧 פונקציות מרכזיות
===============================================================================

register_user_with_code_db(chat_id, code_input)
-----------------------------------------------
מטרה: רישום משתמש עם קוד אישור
קלט: מזהה צ'אט + קוד (או None למשתמש חדש)
פלט: {"success": bool, "message": str, "attempt_num": int}

check_user_approved_status_db(chat_id)
--------------------------------------
מטרה: בדיקת סטטוס אישור משתמש
קלט: מזהה צ'אט
פלט: {"status": "approved"/"pending"/"not_found"}

approve_user_db(chat_id)
------------------------
מטרה: אישור משתמש (עדכון approved=TRUE)
קלט: מזהה צ'אט
פלט: {"success": bool}

===============================================================================
✅ יתרונות המעבר למסד נתונים
===============================================================================

1. מהירות: שאילתות מהירות במקום קריאת גיליונות
2. יציבות: אין תלות ברשת Google
3. אמינות: פעולות אטומיות וטרנזקציות
4. גמישות: שאילתות מורכבות ואינדקסים
5. ביצועים: תמיכה במאות משתמשים בו-זמנית

===============================================================================
🛠️ הוראות תחזוקה
===============================================================================

ניקוי נתונים יתומים:
--------------------
SQL:
-- מחיקת שורות זמניות ישנות (יותר מיום):
DELETE FROM user_profiles 
WHERE code_approve IS NULL 
  AND chat_id IS NOT NULL 
  AND updated_at < NOW() - INTERVAL '1 day';

בדיקת שלמות:
-------------
Python:
# הרצת הפונקציה:
check_database_integrity()
# תבדוק כפילויות ותתקן אוטומטי

===============================================================================
📞 תמיכה ודיבוג
===============================================================================

הפעלת לוגים מפורטים:
----------------------
Python:
# בconfig.py:
DEBUG_PRINTS = True

בדיקת מצב משתמש:
------------------
SQL:
SELECT chat_id, code_approve, code_try, approved, updated_at 
FROM user_profiles 
WHERE chat_id = 'CHAT_ID_HERE';

===============================================================================
🎯 נקודות קריטיות לזכור
===============================================================================

1. הכל במסד נתונים - אין יותר תלות בגיליונות!
2. מיזוג שורות שומר על כל הנתונים (במיוחד code_try)
3. כל פעולה אטומית עם בדיקות שלמות
4. לוגים מפורטים לכל פעולה
5. מהירות ויציבות מקסימלית

===============================================================================
🔄 שינויים אחרונים
===============================================================================

2025-07-07: תיקון מיזוג שורות לשמירת code_try
- בעיה: המיזוג איפס את code_try ל-0
- תיקון: שמירת code_try מהשורה הזמנית לפני המחיקה
- תוצאה: אף נתון לא נאבד במיזוג

===============================================================================
📁 קבצים רלוונטיים
===============================================================================

- db_manager.py: פונקציות מסד נתונים
- message_handler.py: לוגיקת הודעות
- config.py: הגדרות מערכת
- comprehensive_deploy_check.py: בדיקות מערכת

===============================================================================
סוף המדריך
=============================================================================== 